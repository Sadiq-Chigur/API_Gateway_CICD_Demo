"use strict";
/*
import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as apigateway from 'aws-cdk-lib/aws-apigateway';
import * as path from 'path';
import * as fs from 'fs';

export class ApiGatewayCicdDemoStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const helloFn = new lambda.Function(this, 'HelloFunction', {
      runtime: lambda.Runtime.NODEJS_18_X,  // <- Fix here
      handler: 'hello.handler',
      code: lambda.Code.fromAsset(path.join(__dirname, '../lambda')),
    });

    const userFn = new lambda.Function(this, 'UserFunction', {
      runtime: lambda.Runtime.NODEJS_18_X,
      handler: 'user.handler',
      code: lambda.Code.fromAsset(path.join(__dirname, '../lambda')),
    });

    // Load and inject ARNs into OpenAPI spec
    const rawSpec = fs.readFileSync('api-definition.json', 'utf8');
    const spec = rawSpec
      .replace('REPLACE_HELLO_URI', `arn:aws:apigateway:${this.region}:lambda:path/2015-03-31/functions/${helloFn.functionArn}/invocations`)
      .replace('REPLACE_USER_URI', `arn:aws:apigateway:${this.region}:lambda:path/2015-03-31/functions/${userFn.functionArn}/invocations`);
    const openApiSpec = JSON.parse(spec);

    const restApi = new apigateway.SpecRestApi(this, 'RestApiFromJson', {
      apiDefinition: apigateway.ApiDefinition.fromInline(openApiSpec),
      deployOptions: {
        stageName: 'dev',
      },
    });

    helloFn.grantInvoke(new cdk.aws_iam.ServicePrincipal('apigateway.amazonaws.com'));
    userFn.grantInvoke(new cdk.aws_iam.ServicePrincipal('apigateway.amazonaws.com'));

    new cdk.CfnOutput(this, 'APIEndpoint', {
      value: `${restApi.url}hello`,
    });
  }
}
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiGatewayCicdDemoStack = void 0;
const cdk = __importStar(require("aws-cdk-lib"));
const lambda = __importStar(require("aws-cdk-lib/aws-lambda"));
const apigateway = __importStar(require("aws-cdk-lib/aws-apigateway"));
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
class ApiGatewayCicdDemoStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const lambdaPath = path.join(__dirname, '../lambda');
        const resourceMap = JSON.parse(fs.readFileSync('resource-map.json', 'utf8'));
        const lambdaFns = {};
        // Step 1: Create Lambda functions dynamically
        for (const [placeholder, handler] of Object.entries(resourceMap)) {
            const logicalName = handler.replace(/[^\w]/g, '') + 'Fn';
            lambdaFns[placeholder] = new lambda.Function(this, logicalName, {
                runtime: lambda.Runtime.NODEJS_18_X,
                handler: handler,
                code: lambda.Code.fromAsset(lambdaPath),
            });
            lambdaFns[placeholder].grantInvoke(new cdk.aws_iam.ServicePrincipal('apigateway.amazonaws.com'));
        }
        // Step 2: Read OpenAPI JSON and inject Lambda ARNs
        let openApiJson = fs.readFileSync('api-definition.json', 'utf8');
        for (const [placeholder, fn] of Object.entries(lambdaFns)) {
            const uri = `arn:aws:apigateway:${this.region}:lambda:path/2015-03-31/functions/${fn.functionArn}/invocations`;
            openApiJson = openApiJson.replace(new RegExp(placeholder, 'g'), uri);
        }
        const api = new apigateway.SpecRestApi(this, 'AutoGeneratedRestApi', {
            apiDefinition: apigateway.ApiDefinition.fromInline(JSON.parse(openApiJson)),
            deployOptions: {
                stageName: 'dev',
            },
        });
        new cdk.CfnOutput(this, 'APIEndpoint', {
            value: `${api.url}hello`,
        });
    }
}
exports.ApiGatewayCicdDemoStack = ApiGatewayCicdDemoStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpX2dhdGV3YXlfY2ljZF9kZW1vLXN0YWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL2FwaV9nYXRld2F5X2NpY2RfZGVtby1zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUE4Q0U7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR0YsaURBQW1DO0FBRW5DLCtEQUFpRDtBQUNqRCx1RUFBeUQ7QUFDekQsdUNBQXlCO0FBQ3pCLDJDQUE2QjtBQUU3QixNQUFhLHVCQUF3QixTQUFRLEdBQUcsQ0FBQyxLQUFLO0lBQ3BELFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBc0I7UUFDOUQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFFckQsTUFBTSxXQUFXLEdBQTJCLElBQUksQ0FBQyxLQUFLLENBQ3BELEVBQUUsQ0FBQyxZQUFZLENBQUMsbUJBQW1CLEVBQUUsTUFBTSxDQUFDLENBQzdDLENBQUM7UUFFRixNQUFNLFNBQVMsR0FBb0MsRUFBRSxDQUFDO1FBRXRELDhDQUE4QztRQUM5QyxLQUFLLE1BQU0sQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDO1lBQ2pFLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQztZQUV6RCxTQUFTLENBQUMsV0FBVyxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxXQUFXLEVBQUU7Z0JBQzlELE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVc7Z0JBQ25DLE9BQU8sRUFBRSxPQUFPO2dCQUNoQixJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO2FBQ3hDLENBQUMsQ0FBQztZQUVILFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxXQUFXLENBQ2hDLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQywwQkFBMEIsQ0FBQyxDQUM3RCxDQUFDO1FBQ0osQ0FBQztRQUVELG1EQUFtRDtRQUNuRCxJQUFJLFdBQVcsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLHFCQUFxQixFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRWpFLEtBQUssTUFBTSxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUM7WUFDMUQsTUFBTSxHQUFHLEdBQUcsc0JBQXNCLElBQUksQ0FBQyxNQUFNLHFDQUFxQyxFQUFFLENBQUMsV0FBVyxjQUFjLENBQUM7WUFDL0csV0FBVyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxNQUFNLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZFLENBQUM7UUFFRCxNQUFNLEdBQUcsR0FBRyxJQUFJLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLHNCQUFzQixFQUFFO1lBQ25FLGFBQWEsRUFBRSxVQUFVLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQzNFLGFBQWEsRUFBRTtnQkFDYixTQUFTLEVBQUUsS0FBSzthQUNqQjtTQUNGLENBQUMsQ0FBQztRQUVILElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsYUFBYSxFQUFFO1lBQ3JDLEtBQUssRUFBRSxHQUFHLEdBQUcsQ0FBQyxHQUFHLE9BQU87U0FDekIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBOUNELDBEQThDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgKiBhcyBsYW1iZGEgZnJvbSAnYXdzLWNkay1saWIvYXdzLWxhbWJkYSc7XG5pbXBvcnQgKiBhcyBhcGlnYXRld2F5IGZyb20gJ2F3cy1jZGstbGliL2F3cy1hcGlnYXRld2F5JztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5cbmV4cG9ydCBjbGFzcyBBcGlHYXRld2F5Q2ljZERlbW9TdGFjayBleHRlbmRzIGNkay5TdGFjayB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzPzogY2RrLlN0YWNrUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcblxuICAgIGNvbnN0IGhlbGxvRm4gPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsICdIZWxsb0Z1bmN0aW9uJywge1xuICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzE4X1gsICAvLyA8LSBGaXggaGVyZVxuICAgICAgaGFuZGxlcjogJ2hlbGxvLmhhbmRsZXInLFxuICAgICAgY29kZTogbGFtYmRhLkNvZGUuZnJvbUFzc2V0KHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi9sYW1iZGEnKSksXG4gICAgfSk7XG5cbiAgICBjb25zdCB1c2VyRm4gPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsICdVc2VyRnVuY3Rpb24nLCB7XG4gICAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5OT0RFSlNfMThfWCxcbiAgICAgIGhhbmRsZXI6ICd1c2VyLmhhbmRsZXInLFxuICAgICAgY29kZTogbGFtYmRhLkNvZGUuZnJvbUFzc2V0KHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi9sYW1iZGEnKSksXG4gICAgfSk7XG5cbiAgICAvLyBMb2FkIGFuZCBpbmplY3QgQVJOcyBpbnRvIE9wZW5BUEkgc3BlY1xuICAgIGNvbnN0IHJhd1NwZWMgPSBmcy5yZWFkRmlsZVN5bmMoJ2FwaS1kZWZpbml0aW9uLmpzb24nLCAndXRmOCcpO1xuICAgIGNvbnN0IHNwZWMgPSByYXdTcGVjXG4gICAgICAucmVwbGFjZSgnUkVQTEFDRV9IRUxMT19VUkknLCBgYXJuOmF3czphcGlnYXRld2F5OiR7dGhpcy5yZWdpb259OmxhbWJkYTpwYXRoLzIwMTUtMDMtMzEvZnVuY3Rpb25zLyR7aGVsbG9Gbi5mdW5jdGlvbkFybn0vaW52b2NhdGlvbnNgKVxuICAgICAgLnJlcGxhY2UoJ1JFUExBQ0VfVVNFUl9VUkknLCBgYXJuOmF3czphcGlnYXRld2F5OiR7dGhpcy5yZWdpb259OmxhbWJkYTpwYXRoLzIwMTUtMDMtMzEvZnVuY3Rpb25zLyR7dXNlckZuLmZ1bmN0aW9uQXJufS9pbnZvY2F0aW9uc2ApO1xuICAgIGNvbnN0IG9wZW5BcGlTcGVjID0gSlNPTi5wYXJzZShzcGVjKTtcblxuICAgIGNvbnN0IHJlc3RBcGkgPSBuZXcgYXBpZ2F0ZXdheS5TcGVjUmVzdEFwaSh0aGlzLCAnUmVzdEFwaUZyb21Kc29uJywge1xuICAgICAgYXBpRGVmaW5pdGlvbjogYXBpZ2F0ZXdheS5BcGlEZWZpbml0aW9uLmZyb21JbmxpbmUob3BlbkFwaVNwZWMpLFxuICAgICAgZGVwbG95T3B0aW9uczoge1xuICAgICAgICBzdGFnZU5hbWU6ICdkZXYnLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGhlbGxvRm4uZ3JhbnRJbnZva2UobmV3IGNkay5hd3NfaWFtLlNlcnZpY2VQcmluY2lwYWwoJ2FwaWdhdGV3YXkuYW1hem9uYXdzLmNvbScpKTtcbiAgICB1c2VyRm4uZ3JhbnRJbnZva2UobmV3IGNkay5hd3NfaWFtLlNlcnZpY2VQcmluY2lwYWwoJ2FwaWdhdGV3YXkuYW1hem9uYXdzLmNvbScpKTtcblxuICAgIG5ldyBjZGsuQ2ZuT3V0cHV0KHRoaXMsICdBUElFbmRwb2ludCcsIHtcbiAgICAgIHZhbHVlOiBgJHtyZXN0QXBpLnVybH1oZWxsb2AsXG4gICAgfSk7XG4gIH1cbn1cbiovXG5cblxuaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0ICogYXMgbGFtYmRhIGZyb20gJ2F3cy1jZGstbGliL2F3cy1sYW1iZGEnO1xuaW1wb3J0ICogYXMgYXBpZ2F0ZXdheSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtYXBpZ2F0ZXdheSc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuXG5leHBvcnQgY2xhc3MgQXBpR2F0ZXdheUNpY2REZW1vU3RhY2sgZXh0ZW5kcyBjZGsuU3RhY2sge1xuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wcz86IGNkay5TdGFja1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG5cbiAgICBjb25zdCBsYW1iZGFQYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uL2xhbWJkYScpO1xuXG4gICAgY29uc3QgcmVzb3VyY2VNYXA6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSBKU09OLnBhcnNlKFxuICAgICAgZnMucmVhZEZpbGVTeW5jKCdyZXNvdXJjZS1tYXAuanNvbicsICd1dGY4JylcbiAgICApO1xuXG4gICAgY29uc3QgbGFtYmRhRm5zOiBSZWNvcmQ8c3RyaW5nLCBsYW1iZGEuRnVuY3Rpb24+ID0ge307XG5cbiAgICAvLyBTdGVwIDE6IENyZWF0ZSBMYW1iZGEgZnVuY3Rpb25zIGR5bmFtaWNhbGx5XG4gICAgZm9yIChjb25zdCBbcGxhY2Vob2xkZXIsIGhhbmRsZXJdIG9mIE9iamVjdC5lbnRyaWVzKHJlc291cmNlTWFwKSkge1xuICAgICAgY29uc3QgbG9naWNhbE5hbWUgPSBoYW5kbGVyLnJlcGxhY2UoL1teXFx3XS9nLCAnJykgKyAnRm4nO1xuXG4gICAgICBsYW1iZGFGbnNbcGxhY2Vob2xkZXJdID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCBsb2dpY2FsTmFtZSwge1xuICAgICAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5OT0RFSlNfMThfWCxcbiAgICAgICAgaGFuZGxlcjogaGFuZGxlcixcbiAgICAgICAgY29kZTogbGFtYmRhLkNvZGUuZnJvbUFzc2V0KGxhbWJkYVBhdGgpLFxuICAgICAgfSk7XG5cbiAgICAgIGxhbWJkYUZuc1twbGFjZWhvbGRlcl0uZ3JhbnRJbnZva2UoXG4gICAgICAgIG5ldyBjZGsuYXdzX2lhbS5TZXJ2aWNlUHJpbmNpcGFsKCdhcGlnYXRld2F5LmFtYXpvbmF3cy5jb20nKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBTdGVwIDI6IFJlYWQgT3BlbkFQSSBKU09OIGFuZCBpbmplY3QgTGFtYmRhIEFSTnNcbiAgICBsZXQgb3BlbkFwaUpzb24gPSBmcy5yZWFkRmlsZVN5bmMoJ2FwaS1kZWZpbml0aW9uLmpzb24nLCAndXRmOCcpO1xuXG4gICAgZm9yIChjb25zdCBbcGxhY2Vob2xkZXIsIGZuXSBvZiBPYmplY3QuZW50cmllcyhsYW1iZGFGbnMpKSB7XG4gICAgICBjb25zdCB1cmkgPSBgYXJuOmF3czphcGlnYXRld2F5OiR7dGhpcy5yZWdpb259OmxhbWJkYTpwYXRoLzIwMTUtMDMtMzEvZnVuY3Rpb25zLyR7Zm4uZnVuY3Rpb25Bcm59L2ludm9jYXRpb25zYDtcbiAgICAgIG9wZW5BcGlKc29uID0gb3BlbkFwaUpzb24ucmVwbGFjZShuZXcgUmVnRXhwKHBsYWNlaG9sZGVyLCAnZycpLCB1cmkpO1xuICAgIH1cblxuICAgIGNvbnN0IGFwaSA9IG5ldyBhcGlnYXRld2F5LlNwZWNSZXN0QXBpKHRoaXMsICdBdXRvR2VuZXJhdGVkUmVzdEFwaScsIHtcbiAgICAgIGFwaURlZmluaXRpb246IGFwaWdhdGV3YXkuQXBpRGVmaW5pdGlvbi5mcm9tSW5saW5lKEpTT04ucGFyc2Uob3BlbkFwaUpzb24pKSxcbiAgICAgIGRlcGxveU9wdGlvbnM6IHtcbiAgICAgICAgc3RhZ2VOYW1lOiAnZGV2JyxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBuZXcgY2RrLkNmbk91dHB1dCh0aGlzLCAnQVBJRW5kcG9pbnQnLCB7XG4gICAgICB2YWx1ZTogYCR7YXBpLnVybH1oZWxsb2AsXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==