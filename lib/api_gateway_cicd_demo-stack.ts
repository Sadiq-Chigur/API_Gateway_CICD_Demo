/*
import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as apigateway from 'aws-cdk-lib/aws-apigateway';
import * as path from 'path';
import * as fs from 'fs';

export class ApiGatewayCicdDemoStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const helloFn = new lambda.Function(this, 'HelloFunction', {
      runtime: lambda.Runtime.NODEJS_18_X,  // <- Fix here
      handler: 'hello.handler',
      code: lambda.Code.fromAsset(path.join(__dirname, '../lambda')),
    });

    const userFn = new lambda.Function(this, 'UserFunction', {
      runtime: lambda.Runtime.NODEJS_18_X,
      handler: 'user.handler',
      code: lambda.Code.fromAsset(path.join(__dirname, '../lambda')),
    });

    // Load and inject ARNs into OpenAPI spec
    const rawSpec = fs.readFileSync('api-definition.json', 'utf8');
    const spec = rawSpec
      .replace('REPLACE_HELLO_URI', `arn:aws:apigateway:${this.region}:lambda:path/2015-03-31/functions/${helloFn.functionArn}/invocations`)
      .replace('REPLACE_USER_URI', `arn:aws:apigateway:${this.region}:lambda:path/2015-03-31/functions/${userFn.functionArn}/invocations`);
    const openApiSpec = JSON.parse(spec);

    const restApi = new apigateway.SpecRestApi(this, 'RestApiFromJson', {
      apiDefinition: apigateway.ApiDefinition.fromInline(openApiSpec),
      deployOptions: {
        stageName: 'dev',
      },
    });

    helloFn.grantInvoke(new cdk.aws_iam.ServicePrincipal('apigateway.amazonaws.com'));
    userFn.grantInvoke(new cdk.aws_iam.ServicePrincipal('apigateway.amazonaws.com'));

    new cdk.CfnOutput(this, 'APIEndpoint', {
      value: `${restApi.url}hello`,
    });
  }
}
*/

/*
import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as apigateway from 'aws-cdk-lib/aws-apigateway';
import * as fs from 'fs';
import * as path from 'path';

export class ApiGatewayCicdDemoStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const lambdaPath = path.join(__dirname, '../lambda');

    const resourceMap: Record<string, string> = JSON.parse(
      fs.readFileSync('resource-map.json', 'utf8')
    );

    const lambdaFns: Record<string, lambda.Function> = {};

    // Step 1: Create Lambda functions dynamically
    for (const [placeholder, handler] of Object.entries(resourceMap)) {
      const logicalName = handler.replace(/[^\w]/g, '') + 'Fn';

      lambdaFns[placeholder] = new lambda.Function(this, logicalName, {
        runtime: lambda.Runtime.NODEJS_18_X,
        handler: handler,
        code: lambda.Code.fromAsset(lambdaPath),
      });

      lambdaFns[placeholder].grantInvoke(
        new cdk.aws_iam.ServicePrincipal('apigateway.amazonaws.com')
      );
    }

    // Step 2: Read OpenAPI JSON and inject Lambda ARNs
    let openApiJson = fs.readFileSync('api-definition.json', 'utf8');

    for (const [placeholder, fn] of Object.entries(lambdaFns)) {
      const uri = `arn:aws:apigateway:${this.region}:lambda:path/2015-03-31/functions/${fn.functionArn}/invocations`;
      openApiJson = openApiJson.replace(new RegExp(placeholder, 'g'), uri);
    }

    const api = new apigateway.SpecRestApi(this, 'AutoGeneratedRestApi', {
      apiDefinition: apigateway.ApiDefinition.fromInline(JSON.parse(openApiJson)),

      deployOptions: {
        stageName: props?.tags?.['Environment'] || 'dev'
      }
    });

    new cdk.CfnOutput(this, 'APIEndpoint', {
      value: `${api.url}hello`,
    });
  }
}
*/


// lib/api_gateway_cicd_demo-stack.ts
import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as apigateway from 'aws-cdk-lib/aws-apigateway';
import * as fs from 'fs';
import * as path from 'path';

export class ApiGateway_CICD_Demo_Stack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const lambdaPath = path.join(__dirname, '../lambda');
    const resourceMapPath = path.join(__dirname, '../resource-map.json');

    const resourceMap: Record<string, string> = JSON.parse(
      fs.readFileSync(resourceMapPath, 'utf8')
    );

    const lambdaFns: Record<string, lambda.Function> = {};

    for (const [placeholder, handler] of Object.entries(resourceMap)) {
      const logicalName = handler.replace(/[\/.\-]/g, '') + 'Fn';

      const fn = new lambda.Function(this, logicalName, {
        runtime: lambda.Runtime.NODEJS_18_X,
        handler: handler,
        code: lambda.Code.fromAsset(lambdaPath),
      });

      fn.grantInvoke(new cdk.aws_iam.ServicePrincipal('apigateway.amazonaws.com'));

      lambdaFns[placeholder] = fn;
    }

    let openApiJson = fs.readFileSync('api-definition.json', 'utf8');
    for (const [placeholder, fn] of Object.entries(lambdaFns)) {
      const uri = `arn:aws:apigateway:${this.region}:lambda:path/2015-03-31/functions/${fn.functionArn}/invocations`;
      openApiJson = openApiJson.replace(new RegExp(placeholder, 'g'), uri);
    }

    const envStage = props?.tags?.['Environment'] || 'dev';

    const api = new apigateway.SpecRestApi(this, `AutoGeneratedRestApi-${envStage}`, {
      apiDefinition: apigateway.ApiDefinition.fromInline(JSON.parse(openApiJson)),
      deployOptions: {
        stageName: envStage,
      },
    });

    new cdk.CfnOutput(this, 'APIEndpoint', {
      value: `${api.url}hello`,
    });
  }
}
