/*
import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as apigateway from 'aws-cdk-lib/aws-apigateway';
import * as path from 'path';
import * as fs from 'fs';

export class ApiGatewayCicdDemoStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const helloFn = new lambda.Function(this, 'HelloFunction', {
      runtime: lambda.Runtime.NODEJS_18_X,  // <- Fix here
      handler: 'hello.handler',
      code: lambda.Code.fromAsset(path.join(__dirname, '../lambda')),
    });

    const userFn = new lambda.Function(this, 'UserFunction', {
      runtime: lambda.Runtime.NODEJS_18_X,
      handler: 'user.handler',
      code: lambda.Code.fromAsset(path.join(__dirname, '../lambda')),
    });

    // Load and inject ARNs into OpenAPI spec
    const rawSpec = fs.readFileSync('api-definition.json', 'utf8');
    const spec = rawSpec
      .replace('REPLACE_HELLO_URI', `arn:aws:apigateway:${this.region}:lambda:path/2015-03-31/functions/${helloFn.functionArn}/invocations`)
      .replace('REPLACE_USER_URI', `arn:aws:apigateway:${this.region}:lambda:path/2015-03-31/functions/${userFn.functionArn}/invocations`);
    const openApiSpec = JSON.parse(spec);

    const restApi = new apigateway.SpecRestApi(this, 'RestApiFromJson', {
      apiDefinition: apigateway.ApiDefinition.fromInline(openApiSpec),
      deployOptions: {
        stageName: 'dev',
      },
    });

    helloFn.grantInvoke(new cdk.aws_iam.ServicePrincipal('apigateway.amazonaws.com'));
    userFn.grantInvoke(new cdk.aws_iam.ServicePrincipal('apigateway.amazonaws.com'));

    new cdk.CfnOutput(this, 'APIEndpoint', {
      value: `${restApi.url}hello`,
    });
  }
}
*/

/*
import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as apigateway from 'aws-cdk-lib/aws-apigateway';
import * as fs from 'fs';
import * as path from 'path';

export class ApiGatewayCicdDemoStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const lambdaPath = path.join(__dirname, '../lambda');

    const resourceMap: Record<string, string> = JSON.parse(
      fs.readFileSync('resource-map.json', 'utf8')
    );

    const lambdaFns: Record<string, lambda.Function> = {};

    // Step 1: Create Lambda functions dynamically
    for (const [placeholder, handler] of Object.entries(resourceMap)) {
      const logicalName = handler.replace(/[^\w]/g, '') + 'Fn';

      lambdaFns[placeholder] = new lambda.Function(this, logicalName, {
        runtime: lambda.Runtime.NODEJS_18_X,
        handler: handler,
        code: lambda.Code.fromAsset(lambdaPath),
      });

      lambdaFns[placeholder].grantInvoke(
        new cdk.aws_iam.ServicePrincipal('apigateway.amazonaws.com')
      );
    }

    // Step 2: Read OpenAPI JSON and inject Lambda ARNs
    let openApiJson = fs.readFileSync('api-definition.json', 'utf8');

    for (const [placeholder, fn] of Object.entries(lambdaFns)) {
      const uri = `arn:aws:apigateway:${this.region}:lambda:path/2015-03-31/functions/${fn.functionArn}/invocations`;
      openApiJson = openApiJson.replace(new RegExp(placeholder, 'g'), uri);
    }

    const api = new apigateway.SpecRestApi(this, 'AutoGeneratedRestApi', {
      apiDefinition: apigateway.ApiDefinition.fromInline(JSON.parse(openApiJson)),

      deployOptions: {
        stageName: props?.tags?.['Environment'] || 'dev'
      }
    });

    new cdk.CfnOutput(this, 'APIEndpoint', {
      value: `${api.url}hello`,
    });
  }
}
*/

/* //09/07/2025
// lib/api_gateway_cicd_demo-stack.ts
import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as apigateway from 'aws-cdk-lib/aws-apigateway';
import * as fs from 'fs';
import * as path from 'path';

export class ApiGatewayCicdDemoStacks extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const lambdaPath = path.join(__dirname, '../lambda');
    const resourceMapPath = path.join(__dirname, '../resource-map.json');

    const resourceMap: Record<string, string> = JSON.parse(
      fs.readFileSync(resourceMapPath, 'utf8')
    );

    const lambdaFns: Record<string, lambda.Function> = {};

    for (const [placeholder, handler] of Object.entries(resourceMap)) {
      const logicalName = handler.replace(/[\/.\-]/g, '') + 'Fn';

      const fn = new lambda.Function(this, logicalName, {
        runtime: lambda.Runtime.NODEJS_18_X,
        handler: handler,
        code: lambda.Code.fromAsset(lambdaPath),
      });

      fn.grantInvoke(new cdk.aws_iam.ServicePrincipal('apigateway.amazonaws.com'));

      lambdaFns[placeholder] = fn;
    }

    let openApiJson = fs.readFileSync('api-definition.json', 'utf8');
    for (const [placeholder, fn] of Object.entries(lambdaFns)) {
      const uri = `arn:aws:apigateway:${this.region}:lambda:path/2015-03-31/functions/${fn.functionArn}/invocations`;
      openApiJson = openApiJson.replace(new RegExp(placeholder, 'g'), uri);
    }

    const envStage = props?.tags?.['Environment'] || 'dev';

    const api = new apigateway.SpecRestApi(this, `AutoGeneratedRestApi-${envStage}`, {
      apiDefinition: apigateway.ApiDefinition.fromInline(JSON.parse(openApiJson)),
      deployOptions: {
        stageName: envStage,
      },
    });

    new cdk.CfnOutput(this, 'APIEndpoint', {
      value: `${api.url}hello`,
    });
  }
}
*/

/*
// lib/api_gateway_cicd_demo-stack.ts
import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as apigateway from 'aws-cdk-lib/aws-apigateway';
import * as fs from 'fs';
import * as path from 'path';

export class ApiGatewayCicdDemoStacks extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const apiDefinitionPath = path.join(__dirname, '../api-definition.json');
    
    const openApiJson = JSON.parse(fs.readFileSync(apiDefinitionPath, 'utf8'));

    const envStage = props?.tags?.['Environment'] || 'dev';

    const api = new apigateway.SpecRestApi(this, `GlobalLoyaltyApi-${envStage}`, {
      apiDefinition: apigateway.ApiDefinition.fromInline(openApiJson),
      deployOptions: {
        stageName: envStage,
        variables: {
          pointsUrl: `loyalty-backend-${envStage}.internal`,  // customize as per your backend DNS
          usersUrl: `users-service-${envStage}.internal`       // customize as needed
        }
      },
    });

    new cdk.CfnOutput(this, 'ApiEndpoint', {
      value: api.url,
    });
  }
}
*/

/*
// lib/api_gateway_cicd_demo-stack.ts
import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as apigateway from 'aws-cdk-lib/aws-apigateway';
import * as fs from 'fs';
import * as path from 'path';

export class ApiGatewayCicdDemoStacks extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const envStage = props?.tags?.['Environment'] || 'dev';

    const apiDefinitionDir = path.join(__dirname, '../api-definition');
    const envSpecificPath = path.join(apiDefinitionDir, `${envStage}.json`);
    const fallbackPath = path.join(apiDefinitionDir, 'api.json');

    let openApiJson: any;

    if (fs.existsSync(envSpecificPath)) {
      openApiJson = JSON.parse(fs.readFileSync(envSpecificPath, 'utf8'));
      console.log(`✅ Loaded OpenAPI spec for '${envStage}'`);
    } else if (fs.existsSync(fallbackPath)) {
      openApiJson = JSON.parse(fs.readFileSync(fallbackPath, 'utf8'));
      console.warn(`⚠️  OpenAPI spec for '${envStage}' not found. Falling back to 'api.json'`);
    } else {
      throw new Error(`❌ No OpenAPI spec found for '${envStage}' and no fallback available.`);
    }

    const api = new apigateway.SpecRestApi(this, `GlobalLoyaltyApi-${envStage}`, {
      apiDefinition: apigateway.ApiDefinition.fromInline(openApiJson),
      deployOptions: {
        stageName: envStage,
        variables: {
          pointsUrl: `loyalty-backend-${envStage}.internal`,
          usersUrl: `users-service-${envStage}.internal`,
        },
      },
    });

    new cdk.CfnOutput(this, 'ApiEndpoint', {
      value: api.url,
    });
  }
}
*/

/*
// deploy api individually for each environment
// lib/api_gateway_cicd_demo-stack.ts
import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as apigateway from 'aws-cdk-lib/aws-apigateway';
import * as fs from 'fs';
import * as path from 'path';

export class ApiGatewayCicdDemoStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const envStages = ['dev', 'stage', 'prod'];
    const apiDefinitionDir = path.join(__dirname, '../api-definition');

    for (const envStage of envStages) {
      const envPath = path.join(apiDefinitionDir, `${envStage}.json`);
      if (!fs.existsSync(envPath)) {
        console.warn(`⚠️ Skipping '${envStage}' – File not found: ${envPath}`);
        continue;
      }

      const openApiSpec = JSON.parse(fs.readFileSync(envPath, 'utf8'));

      new apigateway.SpecRestApi(this, `SpecApi-${envStage}`, {
        apiDefinition: apigateway.ApiDefinition.fromAsset(envPath),
        restApiName: `GlobalLoyaltyApi-${envStage}`,
        deployOptions: {
          stageName: envStage,
          variables: {
            pointsUrl: `loyalty-backend-${envStage}.internal`,
            usersUrl: `users-service-${envStage}.internal`,
          },
        },
      });
    }
  }
}
*/

/*
// creating a same name API Gateway for each environment
// lib/api_gateway_cicd_demo-stack.ts
import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as apigateway from 'aws-cdk-lib/aws-apigateway';
import * as fs from 'fs';
import * as path from 'path';

export class ApiGatewayCicdDemoStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const envStage = this.node.tryGetContext('env');
    if (!envStage) {
      throw new Error("Missing context variable 'env'. Use --context env=dev|stage|prod");
    }

    const apiDefinitionDir = path.join(__dirname, '../api-definition');
    const envPath = path.join(apiDefinitionDir, `${envStage}.json`);
    if (!fs.existsSync(envPath)) {
      throw new Error(`❌ OpenAPI file for '${envStage}' not found: ${envPath}`);
    }

    const api = new apigateway.SpecRestApi(this, 'GlobalLoyaltyApi', {
      apiDefinition: apigateway.ApiDefinition.fromAsset(envPath),
      restApiName: 'GlobalLoyaltyApi',
      deployOptions: {
        stageName: envStage,
        variables: {
          pointsUrl: `loyalty-backend-${envStage}.internal`,
          usersUrl: `users-service-${envStage}.internal`,
        },
      },
    });
  }
}*/


/*
// Commented at 8:50pm on 15 july 2025 
// lib/api_gateway_cicd_demo-stack.ts
import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as apigateway from 'aws-cdk-lib/aws-apigateway';
import * as fs from 'fs';
import * as path from 'path';

export class ApiGatewayCicdDemoStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const stage = this.node.tryGetContext('env');
    if (!stage) {
      throw new Error("❌ Missing context variable 'env'. Use --context env=<stage>");
    }

    const envPath = path.join(__dirname, `../api-definition/${stage}.json`);
    if (!fs.existsSync(envPath)) {
      throw new Error(`❌ OpenAPI file for stage '${stage}' not found at ${envPath}`);
    }

    const openApiSpec = JSON.parse(fs.readFileSync(envPath, 'utf8'));

    // Create single shared API Gateway
    const api = new apigateway.RestApi(this, 'GlobalLoyaltyApi', {
      restApiName: 'GlobalLoyaltyApi',
      description: 'Shared API Gateway for all stages',
      deploy: false, // disable auto-deploy, we will manage it manually
    });

    // Add dummy method to avoid validation error
    api.root.addMethod('GET', new apigateway.MockIntegration({
      integrationResponses: [{ statusCode: "200" }],
      requestTemplates: { "application/json": '{"statusCode": 200}' },
    }), {
      methodResponses: [{ statusCode: "200" }],
    });

    // Deployment & stage specific configuration
    const deployment = new apigateway.Deployment(this, `Deployment-${stage}`, {
      api,
    });

    new apigateway.Stage(this, `Stage-${stage}`, {
      deployment,
      stageName: stage,
      variables: {
        pointsUrl: `loyalty-backend-${stage}.internal`,
        usersUrl: `users-service-${stage}.internal`,
      },
    });
  }
}*/


/*
// lib/api_gateway_cicd_demo-stack.ts
import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as apigateway from 'aws-cdk-lib/aws-apigateway';
import * as fs from 'fs';
import * as path from 'path';

export class ApiGatewayCicdDemoStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const envStages = ['dev', 'stage', 'prod'];
    const apiDefinitionDir = path.join(__dirname, '../api-definition');

    // Dummy deployment and stage to satisfy CDK requirement
    const dummyDeployment = new apigateway.Deployment(this, 'DummyDeployment', {
      api: undefined as any // placeholder, will not be used since deploy: false
    });
    const dummyStage = new apigateway.Stage(this, 'DummyStage', {
      deployment: dummyDeployment,
      stageName: 'placeholder',
    });

    // Base API with dummy stage
    const baseApi = new apigateway.RestApi(this, 'GlobalLoyaltyApi', {
      restApiName: 'Global-Loyalty-MultiStage',
      description: 'Global Loyalty API with Multi-Stage OpenAPI Specs',
      deploy: false,
    });

    for (const envStage of envStages) {
      const envPath = path.join(apiDefinitionDir, `${envStage}.json`);
      if (!fs.existsSync(envPath)) {
        console.warn(`⚠️ Skipping '${envStage}' – File not found: ${envPath}`);
        continue;
      }

      const openApiSpec = JSON.parse(fs.readFileSync(envPath, 'utf8'));

      const specApi = new apigateway.SpecRestApi(this, `SpecApi-${envStage}`, {
        apiDefinition: apigateway.ApiDefinition.fromInline(openApiSpec),
        deploy: false,
      });

      const deployment = new apigateway.Deployment(this, `Deployment-${envStage}`, {
        api: baseApi,
      });

      new apigateway.Stage(this, `Stage-${envStage}`, {
        deployment,
        stageName: envStage,
        variables: {
          pointsUrl: `loyalty-backend-${envStage}.internal`,
          usersUrl: `users-service-${envStage}.internal`,
        },
      });
    }

    new cdk.CfnOutput(this, 'BaseApiId', {
      value: baseApi.restApiId,
    });
  }
}*/





/////////////////////////////

/*
import { Stack, StackProps, aws_apigateway as apigw } from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as path from 'path';

export class ApiGatewayCicdDemoStack extends Stack {
  constructor(scope: Construct, id: string, props?: StackProps, envName?: string) {
    super(scope, id, props);

    if (!envName) throw new Error("Missing environment name");

    const specPath = path.join(__dirname, '..', 'api-definition', `${envName}.json`);

    new apigw.SpecRestApi(this, `ApiGw-${envName}`, {
      apiDefinition: apigw.ApiDefinition.fromAsset(specPath),
      deployOptions: {
        stageName: envName,
        variables: {
          pointsUrl: `https://${envName}.api.skechers.com`, // override if needed
          contentfulUrl: `https://${envName}.api.skechers.com`,
          usersUrl: `https://${envName}.api.skechers.com`
        }
      },
      restApiName: `LoyaltyApi-${envName}`,
      description: `API Gateway for ${envName} environment`,
    });
  }
}
*/

import { Stack, StackProps, aws_apigateway as apigw, CfnOutput } from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as fs from 'fs';
import * as path from 'path';

export class ApiGatewayCicdDemoStack extends Stack {
  constructor(scope: Construct, id: string, props?: StackProps) {
    super(scope, id, props);

    const api_definition = {
      dev: 'dev.json',
      stage: 'stage.json',
      prod: 'prod.json'
    };

    const restApi = new apigw.CfnRestApi(this, 'LoyaltyRestApi', {
      name: 'LoyaltyApiGateway',
      description: 'Single API Gateway with multiple OpenAPI-based stages',
      failOnWarnings: true,
      endpointConfiguration: {
        types: ['REGIONAL']
      },
      body: JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'api_definition', api_definition.dev), 'utf8')) // any one to initialize
    });

    for (const [env, filename] of Object.entries(api_definition)) {
      const specBody = JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'api_definition', filename), 'utf8'));

      const deployment = new apigw.CfnDeployment(this, `Deployment-${env}`, {
        restApiId: restApi.ref,
        description: `${env} deployment`
      });

      new apigw.CfnStage(this, `Stage-${env}`, {
        restApiId: restApi.ref,
        deploymentId: deployment.ref,
        stageName: env,
        variables: {
          pointsUrl: `${env}.api.skechers.com`,
          contentfulUrl: `${env}.api.skechers.com`,
          usersUrl: `${env}.api.skechers.com`
        }
      });

      new CfnOutput(this, `Url-${env}`, {
        value: `https://${restApi.ref}.execute-api.${this.region}.amazonaws.com/${env}`
      });
    }
  }
}




