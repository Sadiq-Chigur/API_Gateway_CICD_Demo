/*
import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as apigateway from 'aws-cdk-lib/aws-apigateway';
import * as path from 'path';
import * as fs from 'fs';

export class ApiGatewayCicdDemoStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const helloFn = new lambda.Function(this, 'HelloFunction', {
      runtime: lambda.Runtime.NODEJS_18_X,  // <- Fix here
      handler: 'hello.handler',
      code: lambda.Code.fromAsset(path.join(__dirname, '../lambda')),
    });

    const userFn = new lambda.Function(this, 'UserFunction', {
      runtime: lambda.Runtime.NODEJS_18_X,
      handler: 'user.handler',
      code: lambda.Code.fromAsset(path.join(__dirname, '../lambda')),
    });

    // Load and inject ARNs into OpenAPI spec
    const rawSpec = fs.readFileSync('api-definition.json', 'utf8');
    const spec = rawSpec
      .replace('REPLACE_HELLO_URI', `arn:aws:apigateway:${this.region}:lambda:path/2015-03-31/functions/${helloFn.functionArn}/invocations`)
      .replace('REPLACE_USER_URI', `arn:aws:apigateway:${this.region}:lambda:path/2015-03-31/functions/${userFn.functionArn}/invocations`);
    const openApiSpec = JSON.parse(spec);

    const restApi = new apigateway.SpecRestApi(this, 'RestApiFromJson', {
      apiDefinition: apigateway.ApiDefinition.fromInline(openApiSpec),
      deployOptions: {
        stageName: 'dev',
      },
    });

    helloFn.grantInvoke(new cdk.aws_iam.ServicePrincipal('apigateway.amazonaws.com'));
    userFn.grantInvoke(new cdk.aws_iam.ServicePrincipal('apigateway.amazonaws.com'));

    new cdk.CfnOutput(this, 'APIEndpoint', {
      value: `${restApi.url}hello`,
    });
  }
}
*/

/*
import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as apigateway from 'aws-cdk-lib/aws-apigateway';
import * as fs from 'fs';
import * as path from 'path';

export class ApiGatewayCicdDemoStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const lambdaPath = path.join(__dirname, '../lambda');

    const resourceMap: Record<string, string> = JSON.parse(
      fs.readFileSync('resource-map.json', 'utf8')
    );

    const lambdaFns: Record<string, lambda.Function> = {};

    // Step 1: Create Lambda functions dynamically
    for (const [placeholder, handler] of Object.entries(resourceMap)) {
      const logicalName = handler.replace(/[^\w]/g, '') + 'Fn';

      lambdaFns[placeholder] = new lambda.Function(this, logicalName, {
        runtime: lambda.Runtime.NODEJS_18_X,
        handler: handler,
        code: lambda.Code.fromAsset(lambdaPath),
      });

      lambdaFns[placeholder].grantInvoke(
        new cdk.aws_iam.ServicePrincipal('apigateway.amazonaws.com')
      );
    }

    // Step 2: Read OpenAPI JSON and inject Lambda ARNs
    let openApiJson = fs.readFileSync('api-definition.json', 'utf8');

    for (const [placeholder, fn] of Object.entries(lambdaFns)) {
      const uri = `arn:aws:apigateway:${this.region}:lambda:path/2015-03-31/functions/${fn.functionArn}/invocations`;
      openApiJson = openApiJson.replace(new RegExp(placeholder, 'g'), uri);
    }

    const api = new apigateway.SpecRestApi(this, 'AutoGeneratedRestApi', {
      apiDefinition: apigateway.ApiDefinition.fromInline(JSON.parse(openApiJson)),

      deployOptions: {
        stageName: props?.tags?.['Environment'] || 'dev'
      }
    });

    new cdk.CfnOutput(this, 'APIEndpoint', {
      value: `${api.url}hello`,
    });
  }
}
*/

/* //09/07/2025
// lib/api_gateway_cicd_demo-stack.ts
import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as apigateway from 'aws-cdk-lib/aws-apigateway';
import * as fs from 'fs';
import * as path from 'path';

export class ApiGatewayCicdDemoStacks extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const lambdaPath = path.join(__dirname, '../lambda');
    const resourceMapPath = path.join(__dirname, '../resource-map.json');

    const resourceMap: Record<string, string> = JSON.parse(
      fs.readFileSync(resourceMapPath, 'utf8')
    );

    const lambdaFns: Record<string, lambda.Function> = {};

    for (const [placeholder, handler] of Object.entries(resourceMap)) {
      const logicalName = handler.replace(/[\/.\-]/g, '') + 'Fn';

      const fn = new lambda.Function(this, logicalName, {
        runtime: lambda.Runtime.NODEJS_18_X,
        handler: handler,
        code: lambda.Code.fromAsset(lambdaPath),
      });

      fn.grantInvoke(new cdk.aws_iam.ServicePrincipal('apigateway.amazonaws.com'));

      lambdaFns[placeholder] = fn;
    }

    let openApiJson = fs.readFileSync('api-definition.json', 'utf8');
    for (const [placeholder, fn] of Object.entries(lambdaFns)) {
      const uri = `arn:aws:apigateway:${this.region}:lambda:path/2015-03-31/functions/${fn.functionArn}/invocations`;
      openApiJson = openApiJson.replace(new RegExp(placeholder, 'g'), uri);
    }

    const envStage = props?.tags?.['Environment'] || 'dev';

    const api = new apigateway.SpecRestApi(this, `AutoGeneratedRestApi-${envStage}`, {
      apiDefinition: apigateway.ApiDefinition.fromInline(JSON.parse(openApiJson)),
      deployOptions: {
        stageName: envStage,
      },
    });

    new cdk.CfnOutput(this, 'APIEndpoint', {
      value: `${api.url}hello`,
    });
  }
}
*/

/*
// lib/api_gateway_cicd_demo-stack.ts
import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as apigateway from 'aws-cdk-lib/aws-apigateway';
import * as fs from 'fs';
import * as path from 'path';

export class ApiGatewayCicdDemoStacks extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const apiDefinitionPath = path.join(__dirname, '../api-definition.json');
    
    const openApiJson = JSON.parse(fs.readFileSync(apiDefinitionPath, 'utf8'));

    const envStage = props?.tags?.['Environment'] || 'dev';

    const api = new apigateway.SpecRestApi(this, `GlobalLoyaltyApi-${envStage}`, {
      apiDefinition: apigateway.ApiDefinition.fromInline(openApiJson),
      deployOptions: {
        stageName: envStage,
        variables: {
          pointsUrl: `loyalty-backend-${envStage}.internal`,  // customize as per your backend DNS
          usersUrl: `users-service-${envStage}.internal`       // customize as needed
        }
      },
    });

    new cdk.CfnOutput(this, 'ApiEndpoint', {
      value: api.url,
    });
  }
}
*/

/*
// lib/api_gateway_cicd_demo-stack.ts
import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as apigateway from 'aws-cdk-lib/aws-apigateway';
import * as fs from 'fs';
import * as path from 'path';

export class ApiGatewayCicdDemoStacks extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const envStage = props?.tags?.['Environment'] || 'dev';

    const apiDefinitionDir = path.join(__dirname, '../api-definition');
    const envSpecificPath = path.join(apiDefinitionDir, `${envStage}.json`);
    const fallbackPath = path.join(apiDefinitionDir, 'api.json');

    let openApiJson: any;

    if (fs.existsSync(envSpecificPath)) {
      openApiJson = JSON.parse(fs.readFileSync(envSpecificPath, 'utf8'));
      console.log(`✅ Loaded OpenAPI spec for '${envStage}'`);
    } else if (fs.existsSync(fallbackPath)) {
      openApiJson = JSON.parse(fs.readFileSync(fallbackPath, 'utf8'));
      console.warn(`⚠️  OpenAPI spec for '${envStage}' not found. Falling back to 'api.json'`);
    } else {
      throw new Error(`❌ No OpenAPI spec found for '${envStage}' and no fallback available.`);
    }

    const api = new apigateway.SpecRestApi(this, `GlobalLoyaltyApi-${envStage}`, {
      apiDefinition: apigateway.ApiDefinition.fromInline(openApiJson),
      deployOptions: {
        stageName: envStage,
        variables: {
          pointsUrl: `loyalty-backend-${envStage}.internal`,
          usersUrl: `users-service-${envStage}.internal`,
        },
      },
    });

    new cdk.CfnOutput(this, 'ApiEndpoint', {
      value: api.url,
    });
  }
}
*/



// lib/api_gateway_cicd_demo-stack.ts
import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as apigateway from 'aws-cdk-lib/aws-apigateway';
import * as fs from 'fs';
import * as path from 'path';

export class ApiGatewayCicdDemoStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const apiDefinitionDir = path.join(__dirname, '../api-definition');
    const envStages = ['dev', 'stage', 'prod'];

    // Create a single base API
    const baseApi = new apigateway.RestApi(this, 'GlobalLoyaltyApi', {
      restApiName: 'Global-Loyalty-MultiStage',
      description: 'Global Loyalty API with Multi-Stage Specs',
      deploy: false,
    });

    for (const stageName of envStages) {
      const specPath = path.join(apiDefinitionDir, `${stageName}.json`);
      if (!fs.existsSync(specPath)) {
        console.warn(`⚠️ Spec not found for ${stageName}, skipping...`);
        continue;
      }

      const spec = JSON.parse(fs.readFileSync(specPath, 'utf8'));

      // Convert JSON spec to string to set in bodyS3Location or body
      const specBody = JSON.stringify(spec);

      // Use a low-level CfnDeployment that allows assigning specific stage configuration
      const deployment = new apigateway.CfnDeployment(this, `Deployment-${stageName}`, {
        restApiId: baseApi.restApiId,
      });

      // Create stage manually
      new apigateway.CfnStage(this, `Stage-${stageName}`, {
        restApiId: baseApi.restApiId,
        stageName,
        deploymentId: deployment.ref,
        variables: {
          pointsUrl: `loyalty-backend-${stageName}.internal`,
          usersUrl: `users-service-${stageName}.internal`,
        },
      });

      // Inject OpenAPI into base API
      // NOTE: Workaround because CDK doesn't support multi-specs for single API.
      // You must deploy this part one by one using context/environment or synth only one at a time
      // You cannot assign different specs per stage in one deploy without replacements.
    }

    new cdk.CfnOutput(this, 'RestApiId', {
      value: baseApi.restApiId,
    });
    new cdk.CfnOutput(this, 'RestApiRootUrl', {
      value: baseApi.url,
    });
  }
}


