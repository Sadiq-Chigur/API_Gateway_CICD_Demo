AWSTemplateFormatVersion: '2010-09-09'\nDescription: CloudFormation template for SQS queues and S3 event notification for Loyalty Global POS Returns\n\nParameters:\n  Environment:\n    Type: String\n    Description: Environment name (e.g., dev, staging)\n    AllowedValues:\n      - dev\n      - staging\n    Default: dev\n\n  S3BucketName:\n    Type: String\n    Description: Name of the existing S3 bucket\n\nResources:\n  PrimaryQueue:\n    Type: AWS::SQS::Queue\n    Properties:\n      QueueName: !Sub loyalty-global-pos-returns-sqs-${Environment}\n      ReceiveMessageWaitTimeSeconds: 20\n      VisibilityTimeout: 180\n      SqsManagedSseEnabled: true\n      RedrivePolicy:\n        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn\n        maxReceiveCount: 2\n\n  DeadLetterQueue:\n    Type: AWS::SQS::Queue\n    Properties:\n      QueueName: !Sub loyalty-global-pos-returns-sqs-dlq-${Environment}\n      SqsManagedSseEnabled: true\n\n  QueuePolicy:\n    Type: AWS::SQS::QueuePolicy\n    Properties:\n      Queues:\n        - !Ref PrimaryQueue\n      PolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Sid: AllowS3ToSendMessage\n            Effect: Allow\n            Principal:\n              Service: s3.amazonaws.com\n            Action: sqs:SendMessage\n            Resource: !GetAtt PrimaryQueue.Arn\n            Condition:\n              ArnEquals:\n                aws:SourceArn: !Sub arn:aws:s3:::${S3BucketName}\n\n  S3BucketEventNotification:\n    Type: AWS::S3::BucketPolicy\n    Properties:\n      Bucket: !Ref S3BucketName\n      PolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Sid: AllowS3EventNotification\n            Effect: Allow\n            Principal:\n              Service: s3.amazonaws.com\n            Action: \n              - s3:PutBucketNotification\n            Resource: !Sub arn:aws:s3:::${S3BucketName}\n\n  S3NotificationToSQS:\n    Type: Custom::S3BucketNotification\n    Properties:\n      ServiceToken: !GetAtt NotificationFunction.Arn\n      BucketName: !Ref S3BucketName\n      NotificationConfiguration:\n        QueueConfigurations:\n          - Event: s3:ObjectCreated:*\n            Queue: !GetAtt PrimaryQueue.Arn\n            Filter:\n              Key:\n                FilterRules:\n                  - Name: prefix\n                    Value: !Sub dig_retail_returns/${Environment}/nora/usa/\n\n  NotificationFunction:\n    Type: AWS::Lambda::Function\n    Properties:\n      Handler: index.handler\n      Role: !GetAtt NotificationFunctionRole.Arn\n      Code:\n        ZipFile: |\n          import boto3\n          import cfnresponse\n          import json\n          def handler(event, context):\n              try:\n                  if event['RequestType'] == 'Delete':\n                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})\n                      return\n                  props = event['ResourceProperties']\n                  bucket = props['BucketName']\n                  config = props['NotificationConfiguration']\n                  s3 = boto3.client('s3')\n                  s3.put_bucket_notification_configuration(\n                      Bucket=bucket,\n                      NotificationConfiguration=config\n                  )\n                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})\n              except Exception as e:\n                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})\n      Runtime: python3.9\n      Timeout: 30\n\n  NotificationFunctionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: lambda.amazonaws.com\n            Action: sts:AssumeRole\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n      Policies:\n        - PolicyName: S3NotificationAccess\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Effect: Allow\n                Action:\n                  - s3:PutBucketNotification\n                Resource: !Sub arn:aws:s3:::${S3BucketName}\n\nOutputs:\n  PrimaryQueueURL:\n    Description: URL of the primary SQS queue\n    Value: !Ref PrimaryQueue\n  PrimaryQueueARN:\n    Description: ARN of the primary SQS queue\n    Value: !GetAtt PrimaryQueue.Arn\n  DeadLetterQueueURL:\n    Description: URL of the dead letter queue\n    Value: !Ref DeadLetterQueue\n  DeadLetterQueueARN:\n    Description: ARN of the dead letter queue\n    Value: !GetAtt DeadLetterQueue.Arn